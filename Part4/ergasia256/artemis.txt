The purpose of this work is to create a program that can parallelize the analysis of files in a folder. For this purpose, the master program should dynamically take the contents of the folder in which it is running (character files), and for each character file to create a separate process that undertakes the processing of the specific file. In the context of this processing per file, the number of words in the file should be calculated, in parallel through threads. For parallelism you can consider some static separation, e.g. if static X threads are used, each thread takes on (file size) / X characters, in which it will search and count the existence of space characters.


The program will take a parameter:

The directory (optional, if not provided will be listed in the current directory)
The number of characters per thread (if the default value is not given will be 50) - THIS PARAMETER IS NOT NECESSARY
The program should finally produce aggregate results in a file (output.txt) in which each individual process should append its results in the form:

<pid>, <filename measured>, <total_number_of_words>

The basic process will ignore the SIGTERM and SIGINT signals, display a message to the user, and continue to run it.

Useful system calls:

fork (), exec (), open (), read (), write ()
pthread_create (), pthread_join (), pthread_mutex_lock / unlock
wait ()
signal ()

Implementation Methodology:

Start implementing a program that will take 1 parameter and check for its validity (directory)
For the directory, think of a way to find out if a file is ascii
Think about how you will implement the forks for each file
Consider calling phthread_create () for each thread and how the file descriptor offset should be shared between the threads
Make sure there are no zombie processes
You need to create text files in which you know the result (number of words) and use them as trials in your checks if the program is running correctly
Grading

Mode

Grading

Basic process that checks the parameters and finds the ascii files

8

Creation of new processes and their normal termination

6

Creation of threads and their normal termination

6

Smooth program execution, error handling, documentation

5

Total

25

Remarks
First of all you need to state your intention to submit a job. This will be done through the form https://forms.gle/mwFJzatLtoxBCByr8 THIS IS MANDATORY FOR YOUR CATALOGS TO BE CREATED AND SUBMIT YOUR FILES.
Executable files must be running on a Linux operating system.
Deliver your homework through the e-class until Sunday, January 31st at 12 midnight.
In order for your submission to be valid you must submit:
Your reference to eclass. Your report should have a specific format. For this reason you can use: the google doc template "2nd Work Functionally 2019-2020" which you will find at https://docs.google.com/document/u/2/?ftv=1&tgif=d
A tar.gz file that you will copy to the linux server in a specific directory (instructions follow)
The report MUST be in pdf format and its name must be in the format username_e2.pdf, ie if the Α.Μ. your it is it21901 your file will be it21901_e2.pdf - THIS YOU WILL UPLOAD TO ECLASS
Your report should have a specific format. For this reason you can use: the google doc template "2nd Task Functionally 2020-2021" which you will find at https://docs.google.com/document/u/2/?ftv=1&tgif=d if you Login with your account at Harokopio)
Make sure you document your answers and that your report is legible and well-structured and states your details on the cover. There will be a final penalty for reports that do not follow the rules. In any case you should have indicative executions (screenshots from your terminal)
If you want you can have a makefile or any file necessary for the compilation / execution of your program and mention the instructions in your report
In order for your work to be valid you must prepare a tar.gz file which will contain the following:
it21901.c
It21901_report.pdf

The validity of the file will be checked with a shell script therefore if your files do not comply with the above rule they will NOT BE ACCEPTED.


How to test if the file you are submitting is valid:

the command that will be used to check the structure of the tar.gz file will be the following:

tar -tzvf it21901.tar.gz if your file is it21901.tar.gz and it should show you the result:

-rw-r - r-- it21901 / it21901 0 2017-11-10 13:41 it21901.c
-rw-r - r-
Περισσότερα για αυτό το κείμενο-πηγήΤο κείμενο-πηγή απαιτείται για πρόσθετες πληροφορίες μετάφρασης
Αποστολή σχολίων
Πλαϊνά πλαίσια
Ιστορικό
Αποθηκευμένες
Συνεισφορά
Όριο 5.000 χαρακτήρων. Χρησιμοποιήστε τα βέλη, για να μεταφράσετε περισσότερο κείμενο.
Εργαλεία για screenshot
https://github.com/flameshot-org/flameshot
